//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace P1X.TotalCommander.Ba2
{
    public static class WcxHead
    {
        public static class Errors
        {
            /* Error codes returned to calling application */
            public static readonly int E_END_ARCHIVE = 10; /* No more files in archive */
            public static readonly int E_NO_MEMORY = 11; /* Not enough memory */
            public static readonly int E_BAD_DATA = 12; /* CRC error in the data of the currently unpacked file */
            public static readonly int E_BAD_ARCHIVE = 13; /* The archive as a whole is bad, e.g. damaged headers */
            public static readonly int E_UNKNOWN_FORMAT = 14; /* Archive format unknown */
            public static readonly int E_EOPEN = 15; /* Cannot open existing file */
            public static readonly int E_ECREATE = 16; /* Cannot create file */
            public static readonly int E_ECLOSE = 17; /* Error closing file */
            public static readonly int E_EREAD = 18; /* Error reading from file */
            public static readonly int E_EWRITE = 19; /* Error writing to file */
            public static readonly int E_SMALL_BUF = 20; /* Buffer too small */
            public static readonly int E_EABORTED = 21; /* Function aborted by user */
            public static readonly int E_NO_FILES = 22; /* No files found */
            public static readonly int E_TOO_MANY_FILES = 23; /* Too many files to pack */
            public static readonly int E_NOT_SUPPORTED = 24; /* Function not supported */
        }

        /* flags for unpacking */
        public static readonly int PK_OM_LIST = 0;

        public static readonly int PK_OM_EXTRACT = 1;

        /* flags for ProcessFile */
        public static readonly int PK_SKIP = 0; /* Skip this file */
        public static readonly int PK_TEST = 1; /* Test file integrity */
        public static readonly int PK_EXTRACT = 2; /* Extract to disk */

        /* Flags passed through ChangeVolProc */
        public static readonly int PK_VOL_ASK = 0; /* Ask user for location of next volume */
        public static readonly int PK_VOL_NOTIFY = 1; /* Notify app that next volume will be unpacked */

        /* Flags for packing */

        /* For PackFiles */
        public static readonly int PK_PACK_MOVE_FILES = 1; /* Delete original after packing        */
        public static readonly int PK_PACK_SAVE_PATHS = 2; /* Save path names of files             */
        public static readonly int PK_PACK_ENCRYPT = 4; /* Ask user for password, then encrypt  */

        /* Returned by GetPackCaps */
        public static readonly int PK_CAPS_NEW = 1; /* Can create new archives              */
        public static readonly int PK_CAPS_MODIFY = 2; /* Can modify exisiting archives        */
        public static readonly int PK_CAPS_MULTIPLE = 4; /* Archive can contain multiple files   */
        public static readonly int PK_CAPS_DELETE = 8; /* Can delete files                     */
        public static readonly int PK_CAPS_OPTIONS = 16; /* Has options dialog                   */
        public static readonly int PK_CAPS_MEMPACK = 32; /* Supports packing in memory           */
        public static readonly int PK_CAPS_BY_CONTENT = 64; /* Detect archive type by content       */

        public static readonly int PK_CAPS_SEARCHTEXT = 128; /* Allow searching for text in archives */

        /* created with this plugin}            */
        public static readonly int PK_CAPS_HIDE = 256; /* Show as normal files (hide packer    */

        /* icon), open with Ctrl+PgDn, not Enter*/
        public static readonly int PK_CAPS_ENCRYPT = 512; /* Plugin supports PK_PACK_ENCRYPT option*/

        public static readonly int BACKGROUND_UNPACK = 1; /* Which operations are thread-safe?    */
        public static readonly int BACKGROUND_PACK = 2;

        public static readonly int BACKGROUND_MEMPACK = 4;

        /* Flags for packing in memory */
        public static readonly int MEM_OPTIONS_WANTHEADERS = 1; /* Return archive headers with packed data */

        /* Errors returned by PackToMem */
        public static readonly int MEMPACK_OK = 0; /* Function call finished OK, but there is more data */
        public static readonly int MEMPACK_DONE = 1; /* Function call finished OK, there is no more data  */

        public static readonly int PK_CRYPT_SAVE_PASSWORD = 1;
        public static readonly int PK_CRYPT_LOAD_PASSWORD = 2;
        public static readonly int PK_CRYPT_LOAD_PASSWORD_NO_UI = 3; // Load password only if master password has already been entered!
        public static readonly int PK_CRYPT_COPY_PASSWORD = 4; // Copy encrypted password to new archive name
        public static readonly int PK_CRYPT_MOVE_PASSWORD = 5; // Move password when renaming an archive
        public static readonly int PK_CRYPT_DELETE_PASSWORD = 6; // Delete password

        public static readonly int PK_CRYPTOPT_MASTERPASS_SET = 1; // The user already has a master password defined
    }
}